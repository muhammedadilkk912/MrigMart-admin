import { useState, useEffect, useCallback, useRef } from 'react';
import axiosInstance from '../configure/axios';
import { useDispatch } from 'react-redux';
import { showLoading, hideLoading } from '../redux/loadeSlic';
import Cropper from 'react-easy-crop';
import { toast } from 'react-toastify';
import { FaEdit, FaPlus, FaTimes } from "react-icons/fa";
import { MdDelete } from "react-icons/md";

const Banner = () => {
  const dispatch = useDispatch();
  const [banners, setBanners] = useState([]);
  const [product, setProducts] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [newBanner, setNewBanner] = useState({
    image: null,
    link: '',
    isActive: true,
  });
  const [edit, setEdit] = useState(null);
  const [image, setImage] = useState(null);
  const [error, setError] = useState('');
  const [showCropModal, setShowCropModal] = useState(false);
  const [crop, setCrop] = useState({ x: 0, y: 0 });
  const [zoom, setZoom] = useState(1);
  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);

  // Fetch existing banners
  useEffect(() => {
    fetchBanners();
  }, []);

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setNewBanner({
      ...newBanner,
      [name]: type === 'checkbox' ? checked : value
    });
  };

  const fetchBanners = async () => {
    try {
      dispatch(showLoading());
      const response = await axiosInstance.get('/admin/existingbanners');
      setBanners(response.data.banner || []);
    } catch (err) {
      console.log(err);
      setError('Failed to fetch banners');
    } finally {
      dispatch(hideLoading());
    }
  };

  const handleFileChange = (e) => {
    if (e.target.files && e.target.files.length > 0) {
      const reader = new FileReader();
      reader.addEventListener('load', () => setImage(reader.result));
      setShowCropModal(true);
      reader.readAsDataURL(e.target.files[0]);
    }
  };

  const onCropComplete = (croppedArea, croppedAreaPixels) => {
    setCroppedAreaPixels(croppedAreaPixels);
  };

  const applyCrop = async () => {
    if (!image || !croppedAreaPixels) return;

    const croppedImg = await getCroppedImg(image, croppedAreaPixels);
    setNewBanner((prev) => ({
      ...prev,
      image: croppedImg,
    }));

    setShowCropModal(false);
  };

  const getCroppedImg = (imageSrc, crop) => {
    return new Promise((resolve, reject) => {
      const image = new Image();
      image.src = imageSrc;
      image.onload = () => {
        const canvas = document.createElement("canvas");
        canvas.width = crop.width;
        canvas.height = crop.height;
        const ctx = canvas.getContext("2d");

        ctx.drawImage(
          image,
          crop.x,
          crop.y,
          crop.width,
          crop.height,
          0,
          0,
          crop.width,
          crop.height
        );

        resolve(canvas.toDataURL("image/png"));
      };

      image.onerror = (error) => reject(error);
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!newBanner.image) {
      toast.error('Image is required');
      return;
    }
    try {
      dispatch(showLoading());
      const response = await axiosInstance.post('/seller/add_banner', newBanner);
      toast.success(response?.data?.message);
      setShowForm(false);
      setNewBanner({ image: null, link: '', isActive: true });
      fetchBanners();
    } catch (error) {
      console.log(error);
      toast.error('Failed to add banner');
    } finally {
      dispatch(hideLoading());
    }
  };

  const handleDelete = async (id) => {
    if (!window.confirm('Are you sure you want to delete this banner?')) return;

    try {
      dispatch(showLoading());
      const response = await axiosInstance.delete(`/seller/delete_banner/${id}`);
      toast.success(response?.data?.message);
      fetchBanners();
    } catch (err) {
      console.log(err);
      toast.error('Failed to delete banner');
    } finally {
      dispatch(hideLoading());
    }
  };

  const editval = () => {
    return Object.keys(newBanner).some((val) => {
      return edit[val] !== newBanner[val];
    });
  };

  const handleEdit = (val) => {
    setNewBanner({ image: val.image, isActive: val.isActive, link: val.link });
    setEdit(val);
    setShowForm(true);
  };

  const handleEditSubmit = async (e) => {
    e.preventDefault();
    if (!editval()) {
      toast.warning('No changes detected');
      return;
    }

    try {
      dispatch(showLoading());
      const response = await axiosInstance.put(`/seller/update_banner/${edit._id}`, newBanner);
      toast.success(response?.data?.message);
      setShowForm(false);
      setNewBanner({ image: null, link: '', isActive: true });
      setEdit(null);
      fetchBanners();
    } catch (error) {
      console.log("Error in edit banner:", error);
      toast.error('Failed to update banner');
    } finally {
      dispatch(hideLoading());
    }
  };

  const resetForm = () => {
    setShowForm(false);
    setNewBanner({ image: null, link: '', isActive: true });
    setEdit(null);
  };

  return (
    <div className="container mx-auto px-4 py-8">
      {/* Crop Modal */}
      {showCropModal && (
        <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 max-w-2xl w-full shadow-xl">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-bold text-gray-800">Crop Image</h2>
              <button
                onClick={() => setShowCropModal(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <FaTimes className="h-5 w-5" />
              </button>
            </div>

            <div className="relative w-full h-[400px] bg-gray-800 rounded-md overflow-hidden">
              {image && (
                <Cropper
                  image={image}
                  crop={crop}
                  zoom={zoom}
                  aspect={16 / 9}
                  onCropChange={setCrop}
                  onCropComplete={onCropComplete}
                  onZoomChange={setZoom}
                />
              )}
            </div>

            <div className="mt-4 flex justify-between items-center">
              <div className="flex items-center">
                <span className="text-sm text-gray-600 mr-2">Zoom:</span>
                <input
                  type="range"
                  value={zoom}
                  min={1}
                  max={3}
                  step={0.1}
                  onChange={(e) => setZoom(e.target.value)}
                  className="w-24"
                />
              </div>
              <div className="flex gap-3">
                <button
                  onClick={() => {
                    setShowCropModal(false);
                    setNewBanner((prev) => ({ ...prev, image: null }));
                  }}
                  className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition"
                >
                  Cancel
                </button>
                <button
                  onClick={applyCrop}
                  className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition"
                >
                  Apply Crop
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      <div className="flex justify-between items-center mb-8">
        <h1 className="text-2xl font-bold text-gray-800">Banner Management</h1>
        <button
          onClick={() => {
            setShowForm(!showForm);
            if (showForm) resetForm();
          }}
          className="flex items-center gap-2 px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition"
        >
          {showForm ? (
            <>
              <FaTimes /> Cancel
            </>
          ) : (
            <>
              <FaPlus /> Add New Banner
            </>
          )}
        </button>
      </div>

      {/* Add Banner Form */}
      {showForm && (
        <div className="bg-white rounded-lg shadow-md p-6 mb-8 border border-gray-200">
          <h2 className="text-xl font-semibold mb-4 text-gray-800">
            {edit ? 'Edit Banner' : 'Add New Banner'}
          </h2>
          <form onSubmit={edit ? handleEditSubmit : handleSubmit}>
            <div className="grid grid-cols-1 gap-6">
              {/* Image Upload with Preview */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Banner Image *
                </label>
                <div className="flex flex-col items-start gap-4">
                  {newBanner.image ? (
                    <div className="relative group">
                      <img
                        src={newBanner.image}
                        alt="Banner Preview"
                        className="max-w-full h-48 object-contain border rounded-md shadow-sm"
                      />
                      <button
                        type="button"
                        onClick={() => setNewBanner(prev => ({
                          ...prev,
                          image: null
                        }))}
                        className="absolute top-2 right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600 opacity-0 group-hover:opacity-100 transition"
                      >
                        <FaTimes className="h-4 w-4" />
                      </button>
                    </div>
                  ) : (
                    <div className="w-full h-48 border-2 border-dashed border-gray-300 rounded-md flex items-center justify-center bg-gray-50">
                      <span className="text-gray-500">No image selected</span>
                    </div>
                  )}
                  <label className="cursor-pointer bg-gray-100 hover:bg-gray-200 px-4 py-2 rounded-md text-sm font-medium text-gray-700 transition">
                    Choose Image
                    <input
                      type="file"
                      accept="image/*"
                      onChange={handleFileChange}
                      className="hidden"
                    />
                  </label>
                  <p className="text-xs text-gray-500">
                    Recommended size: 1200x400px (will be cropped to 16:9 ratio)
                  </p>
                </div>
              </div>

              {/* Link */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Link (optional)
                </label>
                <input
                  type="url"
                  name="link"
                  value={newBanner.link}
                  onChange={handleInputChange}
                  placeholder="https://example.com"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                />
              </div>

              {/* Active Status */}
              <div className="flex items-center">
                <input
                  type="checkbox"
                  name="isActive"
                  checked={newBanner.isActive}
                  onChange={handleInputChange}
                  className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                />
                <label className="ml-2 block text-sm text-gray-700">
                  Active
                </label>
              </div>
            </div>

            <div className="mt-6 flex gap-4">
              <button
                type="submit"
                disabled={!newBanner.image}
                className={`px-4 py-2 text-white rounded-md transition ${
                  newBanner.image
                    ? 'bg-indigo-600 hover:bg-indigo-700'
                    : 'bg-indigo-400 cursor-not-allowed'
                }`}
              >
                {edit ? 'Update Banner' : 'Add Banner'}
              </button>
              <button
                type="button"
                onClick={resetForm}
                className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition"
              >
                Cancel
              </button>
            </div>
          </form>

          {error && <p className="mt-4 text-red-500">{error}</p>}
        </div>
      )}

      {/* Existing Banners */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <h2 className="text-xl font-semibold mb-4 text-gray-800">Current Banners</h2>
        
        {banners && banners.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {banners.map((banner) => {
              const statusClass = {
                'Pending': 'bg-orange-500',
                'Inactive': 'bg-gray-500',
                'Active': 'bg-green-500',
              }[banner.status] || 'bg-gray-500';

              return (
                <div
                  key={banner._id}
                  className="border relative rounded-lg overflow-hidden shadow-sm hover:shadow-md transition duration-300"
                >
                  <img
                    src={banner.image}
                    alt="Banner"
                    className="w-full h-48 object-cover"
                  />
                  <div className="absolute top-2 right-2 flex gap-2">
                    <button
                      onClick={() => handleEdit(banner)}
                      className="text-white bg-blue-600 hover:bg-blue-700 opacity-80 rounded-full p-2 hover:opacity-100 transition"
                    >
                      <FaEdit className="w-4 h-4" />
                    </button>
                    <button
                      onClick={() => handleDelete(banner._id)}
                      className="text-white bg-red-600 hover:bg-red-700 opacity-80 rounded-full p-2 hover:opacity-100 transition"
                    >
                      <MdDelete className="w-4 h-4" />
                    </button>
                  </div>

                  <div className="p-4 space-y-2">
                    {banner.link && (
                      <p className="text-sm text-gray-600 truncate">
                        Link: <a
                          href={banner.link}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-indigo-600 hover:underline"
                        >
                          {banner.link}
                        </a>
                      </p>
                    )}

                    <div className="flex items-center justify-between">
                      <span
                        className={`px-3 py-1 text-xs rounded-full font-medium text-white ${statusClass}`}
                      >
                        {banner.status}
                      </span>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        ) : (
          <div className="text-center py-12">
            <p className="text-gray-500 text-lg">No banners found</p>
            <button
              onClick={() => setShowForm(true)}
              className="mt-4 px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition"
            >
              Add Your First Banner
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default Banner;